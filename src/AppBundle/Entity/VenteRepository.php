<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Tools\Pagination\Paginator;
use AppBundle\Entity\Vente;
/**
 * VenteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VenteRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCountVente() {
        return $this->createQueryBuilder('v')
                        ->select('COUNT(v)')
                        ->getQuery()
                        ->getSingleScalarResult();
    }

    public function findByPage($nombreParPage = 9, $page = 1) {
        //  On v�rifie que la page n'est pas inf�rieur � 1
        if ($page < 1) {
            throw new \InvalidArgumentException('The argument $page can not be less than one ( value : "' . $page . '").');
        }

        $sql = 'SELECT v FROM AppBundle:Vente v' .
                ' Order By v.dateCreation DESC';

        //  on recupère le résultat de la requête
        $query = $this->getEntityManager()
                ->createQuery($sql);

        $offset = ($page - 1) * $nombreParPage;
        return $this->findBy(
                        array(), array(
                            'dateCreation' => 'DESC'
                        ), $nombreParPage, $offset
        );

        // On définit l'ordre à partir duquel commencer la liste
        $query->setFirstResult($offset)
                // Ainsi que le nombre d'ordres à afficher
                ->setMaxResults($nombreParPage);
        // Enfin, on retourne l'obvet Paginator correspondant à la requête construite        
        return new Paginator($query);
    }
    
    
    private function getOffresQueryBuilder() {
        return $this->createQueryBuilder('o')
        ;
    }

    /**
     * Retourne les offres par catégory
     * @param type $category
     * @param type $limit
     * @param type $offset
     * @param type $sortedBy
     * @return type
     */
    public function getOffresByCategory($category, $limit = null, $offset = null, $sortedBy = null) {

        $query = $this->getOffresQueryBuilder()
                //->innerJoin('o.product.category', 'c')
                ->where("o.productCategroy LIKE :category")
                
                ->setParameter('category', '%'.$category.'%');

        return $this->getQueryResult($query, $limit, $offset, $sortedBy);
    }

    private function getQueryResult($query, $limit, $offset, $sortedBy) {
        if ($limit && $offset) {
            $query->setMaxResults($limit)
                    ->setFirstResult($offset);
        }

//        $query->orderBy("p.pinnedProvect", 'DESC');
//        
//        if (!$sortedBy) {
//            $query->addOrderBy('o.createDate', 'DESC');
//        } else {
//            if ($sortedBy == 'rating') {
//                $query->addOrderBy("p.rating", 'DESC');
//            } else if ($sortedBy == 'owner') {
//                $query->innerJoin('p.owner', 'u');
//                $query->addOrderBy("u", 'ASC');
//            } else {
//                $query->addOrderBy("o.{$sortedBy}", 'DESC');
//            }
//        }
        
        return $query->getQuery()
                        ->getResult();
    }

    public function getPublicProvect($limit = null, $offset = null, $sortedBy = null) {

        $query = $this->getOffresQueryBuilder();
        return $this->getQueryResult($query, $limit, $offset, $sortedBy);
    }

    public function getCountPublicProvect() {
        return $this->createQueryBuilder('p')
                        ->select('COUNT(p)')
                        ->getQuery()
                        ->getSingleScalarResult();
    }
    
    
    public function getForLuceneQuery($query)
    {
        $hits = Vente::getLuceneIndex()->find($query);
 
        $pks = array();
        foreach ($hits as $hit)
        {
          $pks[] = $hit->pk;
        }
 
        if (empty($pks))
        {
          return array();
        }
 
        $q = $this->createQueryBuilder('v')
            ->where('v.id IN (:pks)')
            ->setParameter('pks', $pks)
//            ->andWhere('v.is_activated = :active')
//            ->setParameter('active', 1)
            ->setMaxResults(20)
            ->getQuery();
 
        return $q->getResult();
    }
}
